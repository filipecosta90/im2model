/*
#include <boost/process.hpp>
#include <boost/filesystem/operations.hpp>                // for directory_iterator
#include <boost/filesystem/path.hpp>                      // for path, operator==, oper...
#include <boost/iterator/iterator_facade.hpp>             // for iterator_facade_base
#include <boost/thread.hpp>                               // for thread
#include <boost/tokenizer.hpp>
#include <boost/program_options.hpp>                      // for error

#include <cassert>                                        // for assert
#include <cmath>                                          // for fabs, round
#include <cstdlib>                                        // for div_t, div
#include <exception>                                      // for exception
#include <iostream>                                       // for string, str...
#include <iomanip>                                        // std::setw

#include <opencv2/core/hal/interface.h>                   // for CV_8UC1
#include <opencv2/imgcodecs/imgcodecs_c.h>                // for ::CV_LOAD_I...
#include <opencv2/core.hpp>                               // for RNG
#include <opencv2/core/cvstd.inl.hpp>                     // for String::String
#include <opencv2/core/mat.hpp>                           // for Mat
#include <opencv2/core/mat.inl.hpp>                       // for Mat::Mat
#include <opencv2/core/operations.hpp>                    // for RNG::RNG
#include <opencv2/core/types.hpp>                         // for Rect, Point3d
#include <opencv2/imgcodecs.hpp>                          // for imread
*/
// gui includes
#include "configwin.h"
#include "ui_configwin.h"
#include "treemodel.h"

#include <QFileDialog>
#include <QFileSystemModel>
#include <QTreeView>
#include <QFile>

MainWindow::MainWindow(QWidget *parent) :
  QMainWindow(parent),
  ui(new Ui::MainWindow)
{
  /**
   *
   * The “configwin.h” file is generated by the user interface compiler (uic), 
   * using the QT5_WRAP_UI command on cmake
   * The output is directly into the output folder, 
   * so you should add INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}) 
   * to your project file — otherwise, the files won’t be found. 
   * In your dialog constructor, you can init the UI now using:
   * **/
  ui->setupUi(this);
  //QFileSystemModel *model = new QFileSystemModel();

  // model->setRootPath(QDir::currentPath());
  //ui->qtree_view_image_aberrations->setModel(model);
  //ui->qtree_view_image_aberrations->setRootIndex(model->index(QDir::currentPath()));
  delete ui->mainToolBar; // add this line

  QFile file("/Users/filipeoliveira/Documents/im2model/src/default.txt");
  file.open(QIODevice::ReadOnly);
  TreeModel *model = new TreeModel(file.readAll());
  file.close();
  ui->qtree_view_image_aberrations->setModel(model);
  ui->qtree_view_image_aberrations->show();
}

MainWindow::~MainWindow()
{
  delete ui;
}

void MainWindow::on_qpush_load_image_clicked()
{
  QString fileName = QFileDialog::getOpenFileName(this,
      tr("Open image"),
      tr("."),
      tr("Image Files (*.png *.jpg *.jpeg *.bmp *.tif)"));
  ui->qline_image_path->setText(fileName);
}

void MainWindow::on_qpush_load_cif_clicked()
{

}

/** Simulation Data **/
void MainWindow::on_qline_super_cell_size_a_editingFinished()
{

}

void MainWindow::on_qline_super_cell_size_b_editingFinished()
{

}

void MainWindow::on_qline_super_cell_size_c_editingFinished()
{

}

void MainWindow::on_qline_nx_simulated_horizontal_samples_editingFinished()
{

}

void MainWindow::on_qline_ny_simulated_vertical_samples_editingFinished()
{

}

void MainWindow::on_qline_slice_file_name_prefix_editingFinished()
{

}

void MainWindow::on_qline_accelaration_voltage_ht_editingFinished()
{

}

/** Experimental Data **/
void MainWindow::on_qline_exp_nx_editingFinished()
{

}

void MainWindow::on_qline_exp_ny_editingFinished()
{

}

void MainWindow::on_qline_roi_center_x_editingFinished()
{

}

void MainWindow::on_qline_roi_center_y_editingFinished()
{

}

void MainWindow::on_qline_roi_size_x_editingFinished()
{

}

void MainWindow::on_qline_roi_size_y_editingFinished()
{

}

