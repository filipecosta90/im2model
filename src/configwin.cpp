/*
#include <boost/process.hpp>
#include <boost/filesystem/operations.hpp>                // for directory_iterator
#include <boost/filesystem/path.hpp>                      // for path, operator==, oper...
#include <boost/iterator/iterator_facade.hpp>             // for iterator_facade_base
#include <boost/thread.hpp>                               // for thread
#include <boost/tokenizer.hpp>
#include <boost/program_options.hpp>                      // for error

#include <cassert>                                        // for assert
#include <cmath>                                          // for fabs, round
#include <cstdlib>                                        // for div_t, div
#include <exception>                                      // for exception
#include <iostream>                                       // for string, str...
#include <iomanip>                                        // std::setw

#include <opencv2/core/hal/interface.h>                   // for CV_8UC1
#include <opencv2/imgcodecs/imgcodecs_c.h>                // for ::CV_LOAD_I...
#include <opencv2/core.hpp>                               // for RNG
#include <opencv2/core/cvstd.inl.hpp>                     // for String::String
#include <opencv2/core/mat.hpp>                           // for Mat
#include <opencv2/core/mat.inl.hpp>                       // for Mat::Mat
#include <opencv2/core/operations.hpp>                    // for RNG::RNG
#include <opencv2/core/types.hpp>                         // for Rect, Point3d
#include <opencv2/imgcodecs.hpp>                          // for imread
*/
// gui includes
#include "configwin.h"
#include "ui_configwin.h"
#include "treemodel.h"

#include <QFileDialog>
#include <QFileSystemModel>
#include <QTreeView>
#include <QFile>

MainWindow::MainWindow(QWidget *parent) :
  QMainWindow(parent),
  ui(new Ui::MainWindow)
{
  /**
   *
   * The “configwin.h” file is generated by the user interface compiler (uic), 
   * using the QT5_WRAP_UI command on cmake
   * The output is directly into the output folder, 
   * so you should add INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}) 
   * to your project file — otherwise, the files won’t be found. 
   * In your dialog constructor, you can init the UI now using:
   * **/
  ui->setupUi(this);
  delete ui->mainToolBar; // add this line

  QStringList headers_action;
  headers_action << tr("Field") << tr("Value");

  QStringList project_setup_fields;
  project_setup_fields << tr("Experimental Image");
  project_setup_fields << tr(" Path");

  project_setup_fields << tr(" Sampling (nm/pixel)") << tr( "  x\t0") << tr( "  y\t0");
  project_setup_fields << tr(" Roi Center (pixel)") << tr( "  x\t0") << tr( "  y\t0");
  project_setup_fields << tr(" Roi Size (pixel)") << tr( "  x\t0") << tr( "  y\t0");

  project_setup_fields << tr("Unit-Cell File");
  project_setup_fields << tr(" CIF");
  project_setup_fields << tr(" CEL");

  project_setup_fields << tr("Projected y axis") << tr( " u\t0") << tr( " v\t0") << tr( " w\t0");
  project_setup_fields << tr("Projection direction") << tr( " h\t0") << tr( " h\t0") << tr( " l\t0");

  TreeModel *project_setup_fields_model = new TreeModel(headers_action, project_setup_fields );

  ui->qtree_view_project_setup->setModel(project_setup_fields_model);
  QModelIndex exp_data_index = project_setup_fields_model->index(0,0);
  QModelIndex exp_path = project_setup_fields_model->index(0,1,exp_data_index);

  QModelIndex unit_cell_index = project_setup_fields_model->index(1,0);
  QModelIndex cif_path = project_setup_fields_model->index(0,1,unit_cell_index);
  QModelIndex cel_path = project_setup_fields_model->index(1,1,unit_cell_index);

  ui->qtree_view_project_setup->setIndexWidget(exp_path,ui->qwidget_load_experimental_image);
  ui->qtree_view_project_setup->setIndexWidget(cif_path,ui->qwidget_load_cel);
  ui->qtree_view_project_setup->setIndexWidget(cel_path,ui->qwidget_load_cif);

  for (int column = 0; column < project_setup_fields_model->columnCount(); ++column){
    ui->qtree_view_project_setup->resizeColumnToContents(column);
  }

  QStringList headers;
  headers << tr("Field") << tr("Value");

  QStringList simulation_fields;
  simulation_fields << tr("Estimated Experimental Image Parameters");
  simulation_fields << tr(" Thickness\t0");
  simulation_fields << tr(" Defocus\t0");

  simulation_fields << tr("Looped Image aberrations");
  simulation_fields << tr(" Thickness") << tr( "  Lower Bound\t0") << tr( "  Upper Bound\t0") << tr( "  Samples\t0");
  simulation_fields << tr(" Defocus") << tr( "  Lower Bound\t0") << tr( "  Upper Bound\t0") << tr( "  Samples\t0");

  TreeModel *simulation_fields_model = new TreeModel(headers, simulation_fields );
  ui->qtree_view_simulation_setup->setModel(simulation_fields_model);

  for (int column = 0; column < simulation_fields_model->columnCount(); ++column){
    ui->qtree_view_simulation_setup->resizeColumnToContents(column);
  }
  ui->qtree_view_simulation_setup->expandAll();

}

MainWindow::~MainWindow()
{
  delete ui;
}

void MainWindow::on_qpush_load_image_clicked()
{
  QString fileName = QFileDialog::getOpenFileName(this,
      tr("Open image"),
      tr("."),
      tr("Image Files (*.png *.jpg *.jpeg *.bmp *.tif)"));
  ui->qline_image_path->setText(fileName);
}

void MainWindow::on_qpush_load_cif_clicked()
{

}

